// 天劫战斗模块

// 战斗状态 0-恢复状态中 1-寻径中
var battle_status = 0;

// 挂机坐标col
var battle_pCol = 0;

// 挂机坐标row
var battle_pRow = 0;

// 当前定义快捷键 长度为8 没有设置的话就是为-1
var battle_userDefinedSkills = null;

// 快捷键轮询计数,从1到8，再从1开始
var battle_shortcut_count = 1;

//-------------------------------------------  预设战斗模块  -------------------------------------------------

// 设置内置挂机逻辑
function updateDefinedSkills(){
    if(GAME_VARS.isCustomizeHangUp){
        battle_userDefinedSkills = player.getUserDefinedSkills();
    }else{
        // 这里默认的定义键长度为9
        if(player.profession == 1){  // 剑客
            battle_userDefinedSkills = [-1, 2, 4, 12, 14, 3, 1, 6, 0];
        }else if(player.profession == 4){ // 刺客
            battle_userDefinedSkills = [-1, 12, 13, 4, 11, 10, 2, 8, 0];
        }else if(player.profession == 2){ // 道士
            battle_userDefinedSkills = [-1, 4, 12, 13, 7, 2, 1, -1, -1];
        }else if(player.profession == 3){  // 医生
            battle_userDefinedSkills = [-1, 12, 8, 7, 9, 1, -1, -1, -1];
        }
    }
}

// 公共挂机模块
function battle() {
    // 获取玩家当前目标
    var hpPer = getPercentageHp();
    var mpPer = getPercentageMp();
    // 如果玩家没有死亡
    if (player.state != 5) {
        if (battle_status == 0) {  // 恢复中
            if (player.isBeAttack || (isHangUpColRow() && ((hpPer >= GAME_VARS.hpStatusPer && mpPer >= GAME_VARS.mpStatusPer)))) {
                var fightObj = gameEnv.getNearFightObj(battle_pCol, battle_pRow, GAME_VARS.attackScope);
                if (fightObj != null) {
                    // 设置当前对象
                    gameEnv.setCurrentTarget(fightObj);
                    // 设置选择寻径目标
                    player.setAimColRow(fightObj.col, fightObj.row);
                    // 更新状态
                    battle_status = 1;
                }
            } else if (!isHangUpColRow()) { // 如果不在挂机位置
                // 如果当前挂机点不是寻径目标，回到挂机点
                if (!player.isAimColRow(battle_pCol, battle_pRow)) {
                    player.setAimColRow(battle_pCol, battle_pRow);
                }
            } else {  // 恢复
                var isNeedReplyHp = hpPer < GAME_VARS.hpStatusPer;
                // 如果当前职业是医生，给自己加血
                if (player.profession == 3 && isNeedReplyHp && canCastBattleSkill(14)) {
                    player.caskSkill(player, 14);
                }else if (player.profession == 3 && isNeedReplyHp && player.canCastSkill(2)) {
                    player.caskSkill(player, 2);
                } else {
                    drugStatus();
                }
            }
        } else if (battle_status == 1) {  // 寻径中
            var target = player.target;
            // 目标存在，并且不是玩家
            if (target != null && target != player) {
                if (gameEnv.inDistance(player, target, GAME_VARS.battleScope)) {
                    // 进入战斗
                    player.resetFindPath();
                    battle_status = 2;
                } else {
                    // 实时更新寻径位置
                    player.setAimColRow(target.col, target.row);
                }
            } else {
                // 如果丢失目标，回到挂机点
                resetBattleStatus();
            }
        } else if (battle_status == 2) {  // 进入战斗
            // 实时更新战斗对象
            player.updateAttackGameObj();
            // 获取当前选择目标
            var target = player.target;
            if (player.isSelectEnemy()) {  // 如果选中的是可攻击单位
                // 如果怪物血量大于0
                if (target.curHp > 0) {
                    // 进入施法范围
                    if (gameEnv.inDistance(player, target, GAME_VARS.battleScope)) {
                        customizeBattle(hpPer, mpPer, target);
                    } else {
                        battle_status = 1;
                    }
                } else {
                    // 打死当前怪物回原点
                    resetBattleStatus();
                }
            } else {
                // 没有怪物，选一个最近的怪物
                var fightObj = gameEnv.getNearFightObj(battle_pCol, battle_pRow, GAME_VARS.attackScope);
                if (fightObj == null) {
                    resetBattleStatus();
                } else {
                    gameEnv.setCurrentTarget(fightObj);
                }
            }
        }
    } else {
        resetBattleStatus();
        gameEnv.keyPressed(NUM_11);
    }
}

// 置位战斗状态
function resetBattleStatus(){
    // 回原点
    player.stopBattle();
    player.clearPriorityAttack();
    battle_status = 0;
}

// 药品恢复状态
function drugStatus(){
    var hpPer = getPercentageHp();
    var mpPer = getPercentageMp();
    if (player.state != 5) {
        // 判断当前血量是否需要吃药 优先吃紫药
        if (hpPer < GAME_VARS.hpStatusPer) {
            if (GAME_VARS.isUsePurplePotion && gameEnv.canUsePurple()) {
                printMessage("[王辅]：吃紫药！");
                gameEnv.usePurplePotion();
            } else if (GAME_VARS.isUseRedPotion && gameEnv.canUseRed()) {
                printMessage("[王辅]：吃红药！");
                gameEnv.useRedPotion();
            }
        }
        // 判断当前蓝量是否需要吃药 优先吃紫药
        if (mpPer < GAME_VARS.mpStatusPer) {
            if (GAME_VARS.isUsePurplePotion && gameEnv.canUsePurple()) {
                printMessage("[王辅]：吃紫药！");
                gameEnv.usePurplePotion();
            } else if (GAME_VARS.isUseBluePotion && gameEnv.canUseBlue()) {
                printMessage("[王辅]：吃蓝药！");
                gameEnv.useBluePotion();
            }
        }
    }
}

// 是否能释放技能，对于那些0CD的buff技能进行判断，如果buff存在，就不放了
function canCastBattleSkill(skillIndex){
    // 获取玩家buff状态
    var bufferState = player.bufferState;
    if(bufferState != null){
        if(player.profession == 3){  // 职业是医生
            if(skillIndex == 12 && bufferState[10]){  // 如果是放灵言真甲，但是身上有buff
                return false;
            }else if(skillIndex == 10 && bufferState[14]){  // 如果是放疾风之翼，但是身上有buff
                return false;
            }else if(skillIndex == 14 && bufferState[8]){  // 如果是放愈合之契，但是身上有buff
                return false;
            }
        }else if(player.profession == 2){  // 职业是道士
            if(skillIndex == 12 && bufferState[12]){  // 如果是放金刚咒，但是身上有buff
                return false;
            }else if(skillIndex == 13 && bufferState[9]){  // 如果是放玄灵结界，但是身上有buff
                return false;
            }else if(skillIndex == 14 && bufferState[16]){  // 如果是放真元凝聚，但是身上有buff
                return false;
            }
        } else if(player.profession == 1){  // 职业是剑客
            if(skillIndex == 8 && bufferState[11]){  // 如果是放金刚御体，但是身上有buff
                return false;
            }
        }
    }
    // 默认返回玩家是否能放技能
    return player.canCastSkill(skillIndex);
}

// 预设战斗逻辑(依次使用技能)
function customizeBattle(hpPer, mpPer, target){
    // 获取当前计数技能类型
    var skillIndex = battle_userDefinedSkills[battle_shortcut_count];
    // 判断是不是技能
    if(skillIndex >= 0 && skillIndex <= 14){  // 技能键
        // 如果没有释放中的技能，释放当前技能，并增加计数
        if(player.skillIndex == -1){
            // 如果当前职业是医生，给自己加血
            var isNeedReplyHp = hpPer < GAME_VARS.hpStatusPer;
            if(player.profession == 3 && isNeedReplyHp){
                if(isNeedReplyHp && canCastBattleSkill(14)){
                    player.caskSkill(player, 14);
                }else if(isNeedReplyHp && player.canCastSkill(2)){
                    player.caskSkill(player, 2);
                }
            }else{
                // 如果能释放技能
                if(canCastBattleSkill(skillIndex)){
                    // 释放技能
                    player.caskSkill(target, skillIndex);
                }
                // 无论是否能释放技能，增加计数
                ++battle_shortcut_count;
                if(battle_shortcut_count > 8){
                    // 一轮放完置为1
                    battle_shortcut_count = 1;
                }
            }
        }
    }else {  //物品栏也要加一
        ++battle_shortcut_count;
        if(battle_shortcut_count > 8){
            // 一轮放完置为1
            battle_shortcut_count = 1;
        }
    }
    // 判断是否吃药
    drugStatus();
}

//-------------------------------------------  End  -------------------------------------------------

// 获取玩家血量百分比
function getPercentageHp(){
    var r = 0;
    if(player.maxHp != 0){
        r = (player.curHp / player.maxHp) * 100;
    }
    return r;
}

// 获取玩家蓝量百分比
function getPercentageMp(){
    var r = 0;
    if(player.maxMp != 0){
        r = (player.curMp / player.maxMp) * 100;
    }
    return r;
}

// 是否是挂机点
function isHangUpColRow(){
    return battle_pCol == player.col && battle_pRow == player.row;
}

// 重置战斗模块
function restBattle(){
    battle_status = 0;
    battle_shortcut_count = 1;
    // 停止战斗
    player.stopBattle();
}