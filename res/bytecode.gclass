# 加法运算，将运算结果放到栈顶    a + b
# 减法运算，将运算结果放到栈顶    a - b
# 乘法运算，将运算结果放到栈顶    a * b
# 除法运算，将运算结果放到栈顶    a / b
# 取模运算，将运算结果放到栈顶    a % b
# 负号，将运算结果放到栈顶       -a
# 左移操作符，将运算结果放到栈顶  a << 5
# 右移操作符，将运算结果放到栈顶  a >> 5
# ...,value1, [value2]
# ...,value
arith_op [plus|minus|mul|div|modulo|neg|ls|rs]

# 加载数组索引
# ...,arrayref,index
# ...value
aaload

# 存储数组内容
# ...,arrayref,index,value
# ...
aastore

# 存储数组内容，并且将值再放回栈顶
# ...,arrayref,index,value
# ...,value
avstore

# 入栈一个变量(引用值类型可能是对象、数组、函数)
# 入栈一个整数
# 入栈一个浮点数
# 入栈字符串
# 入栈布尔型数据
# ...
# ...,value
const [a|i|f|s|b] value

# 将栈顶的值减1后放回栈顶
# ...,value
# ...,value
decr

# 出栈当前值，并存储到变量b（如果不存在，会提升到全局域）
# ...,value
# ...
store b

# 按位与运算，将运算结果放到栈顶 a & b
# 按位或运算，将运算结果放到栈顶 a | b
# 按位异或运算，将运算结果放到栈顶 a ^ b
# 按位取反运算，将运算结果放到栈顶 ~a
# 逻辑与运算，将运算结果放到栈顶 a && b
# 逻辑或运算，将运算结果放到栈顶 a || b
# 逻辑非，对布尔型数据取反 !a
# ...,value1, [value2]
# ...,value
rela_op [b_and|b_or|b_xor|b_not|l_and|l_or|l_not]

# 将栈顶的值加1后放回栈顶
# ...,value
# ...,value
incr

# 获取对象属性 a.b
# ...,objectref
# ...,value
getfield name

# 设置对象属性 a.b = 9
# ...,objectref,value,[expr]
# ...
putfield name

# 设置对象属性 a.b = 9 key取expr
# ...,objectref,value, expr
# ...
putfieldExpr

# 函数调用 函数自己从栈上取对应的实参 2表示参数个数
# methodref, [arg1, [arg2 ...]]
# value
invoke 2

# 成员函数调用 函数自己从栈上取对应的实参 2表示参数个数
# objectref, methodref, [arg1, [arg2 ...]]
# value
invokeMember 3

# 复制栈顶一个值
# ...,value
# ...,value,value
copy

# 交换栈顶的值
# ...,value1,value2
# ...,value2,value1
swap

# 从栈顶弹出一个值
# ...,value
# ...
pop

# 定义函数 第一个分量是函数长度，第二个分量是函数名称
# ...
# ...
fundef 10 add

# 定义成员函数并加载到栈顶
# ...
# ...value
fundefload 10 add

# 设置函数形参，第一个分量是函数形参名，第二个分量是实参索引(加入变量到当前域)
# ...
# ...
fstore a, 0

# 在当前变量域增加变量，如果变量已存在，忽略
# ...
# ...
declare a

# 创建作用域
# ...
# ...
pushenv [loop|block]

# 销毁作用域
# ...
# ...
popenv [loop|block]

# 比较2个值是否相等，并且返回比较结果  ==
# 比较2个值是否不相等，并且返回比较结果  !=
# 比较值value1是否大于value2
# 比较值value1是否大于等于value2
# 比较值value1是否小于value2
# 比较值value1是否小于等于value2
# ...,value1,value2
# ...,value
comp [eq|neq|gt|ge|lt|le]

# 无条件跳转
# ...
# ...
jump offset

# 根据当前栈顶的值决定是否跳转，false跳转
# ...,value
# ...
false_jump offset

# 循环中跳转，执行后销毁最近的loop域
# ...
# ...
loop_jump 5

# 加载null到栈顶
# ...
# ...,null
lda_null

# 创建对象实例
# ...
# ...,objectref
new Object

# 从函数调用返回
# ...
# ...
return