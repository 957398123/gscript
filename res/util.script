//--------------------------------------------  清理模块  ----------------------------------------
// 是否正在查询背包
var isQueryPackage = false;

// 清理计时器
var cleanTimer = 0;

// 背包保留物品
var RETAIN_ITEMS = [""];

// 检测背包状态
function checkPackage(){
    if(GAME_VARS.isAutoSale && !isQueryPackage){
        ++cleanTimer;
        if(cleanTimer >= GAME_VARS.saleInterval){
            gameEnv.printMessage(7, "[王辅]：开始更新背包信息！");
            gameEnv.queryPackage();
            isQueryPackage = true;
        }
    }
}

// 检测是否能售卖该物品
function isSaleItem(item){
    for(var i = 0; i < RETAIN_ITEMS.length; ++i){
        if(item == RETAIN_ITEMS[i]){
            return false;
        }
    }
    return true;
}

// 清理背包
function cleanPackage(){
    if(GAME_VARS.isAutoSale){
        // 如果查询背包完成
        if(isQueryPackage && gameEnv.isQueryPackage){
            gameEnv.printMessage(7, "[王辅]：更新背包信息完成！");
            gameEnv.printMessage(7, "[王辅]：开始清空背包！");
            var saleTotal = 0;
            for(var i = 0; i < 36; ++i){
                // 输出当前背包内容
                var item = gameEnv.getPackage(i);
                // 如果物品存在，并且允许出售
                if(item[0] > 0){
                    if(isSaleItem(item[2])){
                        gameEnv.printMessage(7, "[王辅]：售卖物品，名称：" + item[2] + "，单价：" + item[5] + "，数量：" + item[1]);
                        saleTotal += item[5] * item[1];
                        gameEnv.saleItem(i, item[1]);
                    }else{
                        gameEnv.printMessage(7, "[王辅]：不售卖该物品，名称：" + item[2]);
                    }
                }
            }
            isQueryPackage = false;
            cleanTimer = 0;
            gameEnv.printMessage(7, "[王辅]：背包清理完成！合计卖出：" + saleTotal);
        }
    }
}

//-------------------------------------------  修理模块  -------------------------------------------------

// 清理计时器
var equipTimer = 0;

// 是否正在查询修理
var isQueryRepart = false;

// 是否正在修理装备
var isRepartEquip = false;

// 检查装备
function checkEquip(){
    if(GAME_VARS.isAutoRepart && !isQueryRepart){
        ++equipTimer;
        if(equipTimer >= GAME_VARS.repartInterval){
            // 更新修理信息
            gameEnv.printMessage(7, "[王辅]：开始更新装备修理信息！");
            isQueryRepart = true;
            gameEnv.updateRepair();
        }
    }
}

// 修理装备
function repairEquip(){
    if(GAME_VARS.isAutoRepart){
        // 如果更新了装备状态，并且装备修理查询完成
        if(isQueryRepart && gameEnv.isQueryRepart){
            isQueryRepart = false;
            var fixAllPrice = gameEnv.fixAllPrice;
            var money = player.money;
            gameEnv.printMessage(7, "[王辅]：修装查询完成，当前修装总需金钱：" + fixAllPrice);
            gameEnv.printMessage(7, "[王辅]：玩家背包当前金钱：" + money);
            if(fixAllPrice > 0){
                // 优先从玩家背包扣除，不够从仓库取钱
                if(money >= fixAllPrice){
                    // 修理全部装备
                    isRepartEquip = true;
                    gameEnv.repairItem();
                    gameEnv.printMessage(7, "[王辅]：开始修理装备！");
                }else {
                    // 从仓库取钱
                    gameEnv.printMessage(7, "[王辅]：修理装备所需金钱不够！");
                }
            }else{
                gameEnv.printMessage(7, "[王辅]：装备无需修理！");
            }
        }
        // 装备修理完成
        if(isRepartEquip && gameEnv.isRepartEquip){
            isRepartEquip = false;
            equipTimer = 0;
            gameEnv.printMessage(7, "[王辅]：修理装备完成！");
        }
    }
}

//--------------------------------------------------  检查存钱  -----------------------------------------

// 存钱检测时间
var CHECK_STORE_TIME = 1;

// 存钱计时器
var storeTimer = 0;

// 保留金钱
var RETAIN_MONEY = 200;

// 检查钱是否存入仓库
function checkStore(){
    if(GAME_VARS.isAutoStore){
        ++storeTimer;
        if(storeTimer >= CHECK_STORE_TIME || gameEnv.isQueryPackage){
            if(!gameEnv.isQueryPackage){
                // 先查背包信息
                checkPackage();
            }else{
                if(gameEnv.isQueryPackage){
                    isQueryPackage = false;
                }
                storeTimer = CHECK_STORE_TIME;
                var diff = player.money - RETAIN_MONEY;
                if(diff > 0){
                    gameEnv.printMessage(7, "[王辅]：当前玩家背包金钱：" + player.money + "，存入" + diff + "到仓库");
                    gameEnv.storeMoney(diff);
                }
            }
        }
    }
}

// 播报计时器
var runTimer = 0;

// 播报运行时间
function printRunTime(){
    ++runTimer;
    if(runTimer >= 10){
        runTimer = 0;
        // 输出运行时间
        gameEnv.printMessage(7, "[王辅]：王辅已运行" + formatTime(gameEnv.getRuntime()));
    }
}

var adTimer = 0;

// 播报广告
function printAD(){
    ++adTimer;
    if(!IS_MEMBER && adTimer >= 3){
        adTimer = 0;
        gameEnv.broadcastMessage("王辅官方群：583627835，进群获取会员以及更强大功能！！！");
    }
}

// 是否已经弹窗提醒
var IS_TEMP_MEMBER_DIALOG = false;

// 检测临时会员
function checkTempMember(){
    if(!IS_MEMBER){
        if(TEMP_MEMBER > 0){
            --TEMP_MEMBER;
            printMessage("[王辅]：您不是王辅会员，会员体验还剩余" + TEMP_MEMBER + "分钟！");
        }
        // 会员到期
        if(TEMP_MEMBER == 0){
            // 关闭会员功能
            disableMemberConfig();
        }
        if(TEMP_MEMBER == 0 && !IS_TEMP_MEMBER_DIALOG){
            IS_TEMP_MEMBER_DIALOG = true;
            uiFrame.addGameForm("msg", "您的体验会员已到期，请注册会员！", "确定", null, SCREEN_W - 30, 110);
        }
    }
}

// 格式化时间
function formatTime(time){
    var day = time / 86400;
    var hour = time / 3600;
    var minute = (time % 3600) / 60;
    var second = time % 60;
    var str = "";
    if(day > 0){
        str += day + "天";
    }
    if(hour > 0){
        str += hour + "时";
    }
    if(minute > 0){
        str += minute + "分";
    }
    str += second + "秒";
    return str;
}