// gui空间，避免变量污染
var guiZone = {};

// 初始化王辅模块
function initHangModule(){
    // 初始化数据
    initHangData();
    // 初始化王辅子菜单
    initHangSubMenu();
    // 初始化设置界面
    initUIConfig();
    // 初始化挂机UI界面
    initUIForm();
    // 初始化最强NPC
    initNpcForm();
    // 初始化高级界面
    initHighForm();
}

// 初始化列表
function initHangData(){
    // keyMap变量对应的按键
    var hangUI = {"index": 0, "keyMap": {}};
    guiZone.hangUI = hangUI;
}

// 初始化子菜单
function initHangSubMenu(){
    var hangUI = guiZone.hangUI;
    var subMenu = ["1 挂机", "2 功能", "3 寻路", "4 设置", "5 高级"];
    hangUI.hangMenu = uiFrame.createUIMenu(145, 23, 60, 0, null, subMenu);
}

// 初始化设置UI
function initUIConfig(){
    var hangUI = guiZone.hangUI;
    var keyMap = hangUI.keyMap;
    var configForm = uiFrame.createUIForm(0, 0, SCREEN_W, SCREEN_H, "");
    configForm.setStyle(0);
    var rimFrame = uiFrame.createUIRim(0, 0, SCREEN_W - 1, SCREEN_H - 1, 4);
    var rimTitle = uiFrame.createUIRim(0, 10, 160, 17, 7);
    var lblTitle = uiFrame.createUILabel(0, rimTitle.positionY + 3, 0, 0, "功能设置", 15718815, 1, 0);
    var rimDown = uiFrame.createUIRim(0, 27, 160, 160, 0);
    var rimDownInner = uiFrame.createUIRim(0, 32, 150, 150, 0);
    var lblOk = uiFrame.createUILabel(0, 0, 0, 0, "确定", 15718815, 1, 0);
    var lblCancel = uiFrame.createUILabel(0, 0, 0, 0, "返回", 15718815, 1, 0);
    configForm.addComponent(rimFrame);
    configForm.addComponentInCenter(rimTitle, 2);
    configForm.addComponentInCenter(lblTitle, 2);
    configForm.addComponentInCenter(rimDown, 2);
    configForm.addComponentInCenter(rimDownInner, 2);
    configForm.addComponentInCenter(lblOk, 5);
    configForm.addComponentInCenter(lblCancel, 6);
    // 选项 穿墙功能
    var rb1 = uiFrame.createUIRadioButton(35, 38 + 0 * 14, 0, 0, "允许穿墙", 0);
    rb1.addItems("开");
    rb1.addItems("关");
    // 获取选项
    if(GAME_VARS.isAllowWall){
        rb1.setChooseItem(0);
    }else{
        rb1.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb1.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isAllowWall = true;
        }else{
            GAME_VARS.isAllowWall = false;
        }
    });
    // 选项 自动修理
    var rb2 = uiFrame.createUIRadioButton(35, 38 + 1 * 14, 0, 0, "自动修理", 0);
    rb2.addItems("开");
    rb2.addItems("关");
    // 获取选项
    if(GAME_VARS.isAutoRepart){
        rb2.setChooseItem(0);
    }else{
        rb2.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb2.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isAutoRepart = true;
        }else{
            GAME_VARS.isAutoRepart = false;
        }
    });
    // 选项 自动售卖
    var rb3 = uiFrame.createUIRadioButton(35, 38 + 2 * 14, 0, 0, "自动售卖", 0);
    rb3.addItems("开");
    rb3.addItems("关");
    // 获取选项
    if(GAME_VARS.isAutoSale){
        rb3.setChooseItem(0);
    }else{
        rb3.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb3.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isAutoSale = true;
        }else{
            GAME_VARS.isAutoSale = false;
        }
    });
    // 修理间隔
    var rb4 = uiFrame.createUIRadioButton(35, 38 + 3 * 14, 0, 0, "修理间隔", 1);
    rb4.setMinNumber(1);
    rb4.setNumber(GAME_VARS.repartInterval);
    rb4.setFreePoint(60 - GAME_VARS.repartInterval);
    // 注册值改变回调函数
    rb4.addNumberCallMethods(function (num) {
        // 改变修理间隔
        GAME_VARS.repartInterval = num;
    });
    // 售卖间隔
    var rb5 = uiFrame.createUIRadioButton(35, 38 + 4 * 14, 0, 0, "售卖间隔", 1);
    rb5.setMinNumber(1);
    rb5.setNumber(GAME_VARS.saleInterval);
    rb5.setFreePoint(60 - GAME_VARS.saleInterval);
    // 注册值改变回调函数
    rb5.addNumberCallMethods(function (num) {
        // 改变售卖间隔
        GAME_VARS.saleInterval = num;
    });
    var rb6 = uiFrame.createUIRadioButton(35, 38 + 5 * 14, 0, 0, "移动速度", 1);
    rb6.setMinNumber(1);
    rb6.setNumber(GAME_VARS.moveSpeed);
    // 速度最大调到9
    rb6.setFreePoint(9 - GAME_VARS.moveSpeed);
    // 注册值改变回调函数
    rb6.addNumberCallMethods(function (num) {
        // 改变移动速度
        GAME_VARS.moveSpeed = num;
    });
    // 选项 解除聊天限制
    var rb7 = uiFrame.createUIRadioButton(35, 38 + 6 * 14, 0, 0, "解除聊天限制", 0);
    rb7.addItems("开");
    rb7.addItems("关");
    // 获取选项
    if(GAME_VARS.isLimitChat){
        rb7.setChooseItem(0);
    }else{
        rb7.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb7.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isLimitChat = true;
        }else{
            GAME_VARS.isLimitChat = false;
        }
    });
    // 选项 自动存钱
    var rb8 = uiFrame.createUIRadioButton(35, 38 + 7 * 14, 0, 0, "自动存钱", 0);
    rb8.addItems("开");
    rb8.addItems("关");
    // 获取选项
    if(GAME_VARS.isAutoStore){
        rb8.setChooseItem(0);
    }else{
        rb8.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb8.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isAutoStore = true;
        }else{
            GAME_VARS.isAutoStore = false;
        }
    });
    // 持有引用
    keyMap.isAllowWall = rb1;
    keyMap.isAutoRepart = rb2;
    keyMap.isAutoSale = rb3;
    keyMap.isLimitChat = rb7;
    keyMap.isAutoStore = rb8;
    keyMap.moveSpeed = rb6;
    // 设置上下选项
    rb2.setAroundComponent(rb1, 1);
    rb2.setAroundComponent(rb3, 2);
    rb4.setAroundComponent(rb3, 1);
    rb4.setAroundComponent(rb5, 2);
    rb5.setAroundComponent(rb4, 1);
    rb5.setAroundComponent(rb6, 2);
    rb6.setAroundComponent(rb5, 1);
    rb6.setAroundComponent(rb7, 2);
    rb7.setAroundComponent(rb6, 1);
    rb7.setAroundComponent(rb8, 2);
    rb8.setAroundComponent(rb7, 1);
    configForm.addComponent(rb1);
    configForm.addComponent(rb2);
    configForm.addComponent(rb3);
    configForm.addComponent(rb4);
    configForm.addComponent(rb5);
    configForm.addComponent(rb6);
    configForm.addComponent(rb7);
    configForm.addComponent(rb8);
    configForm.addKeyCallMethods(configKeyPress);
    configForm.setFocus(true);
    hangUI.configForm = configForm;
}

// 初始化挂机UI
function initUIForm(){
    var hangUI = guiZone.hangUI;
    var baseForm = uiFrame.createUIForm(0, 0, SCREEN_W, SCREEN_H, "");
    baseForm.setStyle(0);
    var rimFrame = uiFrame.createUIRim(0, 0, SCREEN_W - 1, SCREEN_H - 1, 4);
    var rimTitle = uiFrame.createUIRim(0, 10, 160, 17, 7);
    var lblTitle = uiFrame.createUILabel(0, rimTitle.positionY + 3, 0, 0, "挂机设置", 15718815, 1, 0);
    var rimDown = uiFrame.createUIRim(0, 27, 160, 160, 0);
    var rimDownInner = uiFrame.createUIRim(0, 32, 150, 150, 0);
    var lblOk = uiFrame.createUILabel(0, 0, 0, 0, "挂机", 15718815, 1, 0);
    var lblCancel = uiFrame.createUILabel(0, 0, 0, 0, "返回", 15718815, 1, 0);
    // 选项 定点挂机
    var rb1 = uiFrame.createUIRadioButton(35, 38 + 0 * 14, 0, 0, "定点挂机", 0);
    rb1.addItems("开");
    rb1.addItems("关");
    // 获取选项
    if(GAME_VARS.isPatrol){
        rb1.setChooseItem(0);
    }else{
        rb1.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb1.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isPatrol = true;
        }else{
            GAME_VARS.isPatrol = false;
        }
    });
    baseForm.addComponent(rimFrame);
    baseForm.addComponentInCenter(rimTitle, 2);
    baseForm.addComponentInCenter(lblTitle, 2);
    baseForm.addComponentInCenter(rimDown, 2);
    baseForm.addComponentInCenter(rimDownInner, 2);
    baseForm.addComponentInCenter(lblOk, 5);
    baseForm.addComponentInCenter(lblCancel, 6);
    baseForm.addKeyCallMethods(hangHangKey);
    baseForm.addComponent(rb1);
    baseForm.setFocus(true);
    hangUI.baseForm = baseForm;
}

// 初始化最强NPC
function initNpcForm(){
    var hangUI = guiZone.hangUI;
    var tmpItem = [55, 3, 7, 8, 9, 11];
    var subMenu = ["进入氏族领地", "修理", "拍卖", "精炼", "仓库", "邮件"];
    var state = [-1, -1, -1, -1, -1, -1];
    var npcMenu = uiFrame.createUIMenu(5, 48, 164, 142, null, subMenu);
    npcMenu.setMenuItems(tmpItem, subMenu, state);
    npcMenu.setRimStyle(0);
    npcMenu.setFlushType(1);
    hangUI.npcMenu = npcMenu;
}

// 处理王辅菜单选择OK时的按键处理
function keyInHangMenuOk(){
    var hangUI = guiZone.hangUI;
    // 如果为空
    if(uiFrame.getHangMenu() == null){
        uiFrame.setHangMenu(hangUI.hangMenu);
    }else{
        // 获取是否会员
        if(IS_SUPER_MEMBER || IS_MEMBER || TEMP_MEMBER > 0){
            // 获取当前索引
            var hangMenu = uiFrame.getHangMenu();
            var index = hangMenu.getCurrentPointer();
            hangUI.index = index;
            if(index == 0 || index == 3){
                // 设置显示子内容
                gameEnv.setRightMenuSubState(0);
            }else if(index == 1){
                uiFrame.setNpcMenu(hangUI.npcMenu);
            }else if(index == 4){
                if(IS_SUPER_MEMBER){
                    // 设置显示子内容
                    gameEnv.setRightMenuSubState(0);
                }else{
                    uiFrame.addGameForm("msg", "高级功能仅对超级会员开放！", "确定", null, SCREEN_W - 30, 110);
                }
            }else {
                uiFrame.addGameForm("msg", "功能正在开发中，敬请期待！", "确定", null, SCREEN_W - 30, 110);
            }
        }else{
            uiFrame.addGameForm("msg", "您不是王辅会员，请注册会员！", "确定", null, SCREEN_W - 30, 110);
        }
    }
}

// 初始化高级设置UI
function initHighForm(){
    var hangUI = guiZone.hangUI;
    var keyMap = hangUI.keyMap;
    var highForm = uiFrame.createUIForm(0, 0, SCREEN_W, SCREEN_H, "");
    highForm.setStyle(0);
    var rimFrame = uiFrame.createUIRim(0, 0, SCREEN_W - 1, SCREEN_H - 1, 4);
    var rimTitle = uiFrame.createUIRim(0, 10, 160, 17, 7);
    var lblTitle = uiFrame.createUILabel(0, rimTitle.positionY + 3, 0, 0, "高级", 15718815, 1, 0);
    var rimDown = uiFrame.createUIRim(0, 27, 160, 160, 0);
    var rimDownInner = uiFrame.createUIRim(0, 32, 150, 150, 0);
    var lblOk = uiFrame.createUILabel(0, 0, 0, 0, "确定", 15718815, 1, 0);
    var lblCancel = uiFrame.createUILabel(0, 0, 0, 0, "返回", 15718815, 1, 0);
    highForm.addComponent(rimFrame);
    highForm.addComponentInCenter(rimTitle, 2);
    highForm.addComponentInCenter(lblTitle, 2);
    highForm.addComponentInCenter(rimDown, 2);
    highForm.addComponentInCenter(rimDownInner, 2);
    highForm.addComponentInCenter(lblOk, 5);
    highForm.addComponentInCenter(lblCancel, 6);
    // 选项 遇敌锁定
    var rb1 = uiFrame.createUIRadioButton(35, 38 + 0 * 14, 0, 0, "远距锁敌", 0);
    rb1.addItems("开");
    rb1.addItems("关");
    // 获取选项
    if(GAME_VARS.isLockEnemy){
        rb1.setChooseItem(0);
    }else{
        rb1.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb1.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isLockEnemy = true;
        }else{
            GAME_VARS.isLockEnemy = false;
        }
    });
    // 选项 移动施法
    var rb2 = uiFrame.createUIRadioButton(35, 38 + 1 * 14, 0, 0, "移动施法", 0);
    rb2.addItems("开");
    rb2.addItems("关");
    // 获取选项
    if(GAME_VARS.isMoveCast){
        rb2.setChooseItem(0);
    }else{
        rb2.setChooseItem(1);
    }
    // 按钮值发生改变时回调
    rb2.addChooseCallMethods(function (value) {
        if(value == 0){
            GAME_VARS.isMoveCast = true;
        }else{
            GAME_VARS.isMoveCast = false;
        }
    });
    // 持有引用
    keyMap.isLockEnemy = rb1;
    keyMap.isMoveCast = rb2;
    rb1.setAroundComponent(rb2, 2);
    rb2.setAroundComponent(rb1, 1);
    highForm.addComponent(rb1);
    highForm.addComponent(rb2);
    highForm.addKeyCallMethods(configKeyPress);
    highForm.setFocus(true);
    // 高级功能
    hangUI.highForm = highForm;
}

// 王辅功能按键分发
function keyHangUI(){
    var hangUI = guiZone.hangUI;
    var index = hangUI.index;
    if(index == 0){
        hangUI.baseForm.handPressKey();
    }else if(index == 3){
        hangUI.configForm.handPressKey();
    }else if(index == 4){
        hangUI.highForm.handPressKey();
    }
}

// 绘制王辅UI
function drawHangUI(g){
    var hangUI = guiZone.hangUI;
    var index = hangUI.index;
    if(index == 0){
        hangUI.baseForm.draw(g);
    }else if(index == 3){
        hangUI.configForm.draw(g);
    } else if(index == 4){
        hangUI.highForm.draw(g);
    }
}

// 挂机按键处理
function hangHangKey(){
    var baseForm = guiZone.hangUI.baseForm;
    // 首先获取当前聚焦面板
    if(baseForm.isFocusSelf()){
        if(gameEnv.isKeyPress(SOFT_OK) || gameEnv.isKeyPress(SOFT_LEFT)){
            // 弹出挂机选项
            baseForm.addAboutForm("hangup", "确实要挂机吗？", 2, 140, 0);
            var aboutForm = baseForm.getAboutForm();
            // 增加弹框回调函数
            if(aboutForm != null){
                aboutForm.addKeyCallMethods(function(){
                    if(gameEnv.isKeyPress(SOFT_OK) || gameEnv.isKeyPress(SOFT_LEFT)){
                        // 设置开始挂机
                        // 检测当前玩家是否是会员
                        if(IS_MEMBER || TEMP_MEMBER > 0){
                            // 如果设置了定点挂机，设置挂机点
                            if(GAME_VARS.isPatrol){
                                battle_pCol = player.col;
                                battle_pRow = player.row;
                                printMessage("[王辅]：挂机类型：定点挂机，当前定点坐标(" + battle_pCol + ", " + battle_pRow + ")。");
                            }
                            printMessage("[王辅]：开始执行挂机操作！");
                            setIsHangUp(true);
                        }else{
                            setIsHangUp(false);
                            printMessage("[王辅]：您不是王辅会员，请注册会员！");
                        }
                    }else if(gameEnv.isKeyPress(SOFT_RIGHT)){
                        setIsHangUp(false);
                        printMessage("[王辅]：当前挂机已取消！");
                    }
                    // 置空弹框
                    guiZone.hangUI.baseForm.clearAboutForm();
                    gameEnv.setGameState(0);
                });
            }
        }else if(gameEnv.isKeyPress(SOFT_RIGHT)){
            gameEnv.setGameState(0);
        }
    }
}

// 配置界面按键
function configKeyPress(){
    var configForm = guiZone.hangUI.configForm;
    if(gameEnv.isKeyPress(SOFT_RIGHT)){
        gameEnv.setGameState(0);
    }
}

